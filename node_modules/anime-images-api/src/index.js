const request = require('node-superfetch')
const ImageAPIError = require('./Error')
class GetImages {
    constructor(method){
        this.method = method
    }
     async getHugImage(){
        if (typeof this.method !== `string`) throw new TypeError(`METHOD Must be a String`)

        if (this.method !== 'GET') throw new TypeError('METHOD mut be GET')

        let res = await request.get('https://anime-api.hisoka17.repl.co/img/hug')
            if (!res.body) throw new ImageAPIError('404 Not found')
            const data = {
                image: res.body.url
            }
            return data;
    }
    async getRandomImage(){
        /**
         * @typeof {String}
         * 
         * @param {String} method
         */
        if (typeof this.method !== `string`) throw new TypeError(`METHOD Must be a String`)

        if (this.method !== 'GET') throw new TypeError('METHOD mut be GET')

        let response = await request.get('https://anime-api.hisoka17.repl.co/img/rand')
        if (!response.body) throw new ImageAPIError('404 Not found')
        const  data = {
            image: response.body.url
        }
        return data;
    }
    async getPunchImage(){
        if (typeof this.method !== `string`) throw new TypeError(`METHOD Must be a String`)

        if (this.method !== 'GET') throw new TypeError('METHOD mut be GET')

        let response = await request.get('https://anime-api.hisoka17.repl.co/img/punch')
        if (!response.body) throw new ImageAPIError('404 Not found')
        const  data = {
            image: response.body.url
        }
        return data;
    }
    async getKissImage(){
        if (typeof this.method !== `string`) throw new TypeError(`METHOD Must be a String`)

        if (this.method !== 'GET') throw new TypeError('METHOD mut be GET')

        let res = await request.get('https://anime-api.hisoka17.repl.co/img/kiss')
        
        if (!res.body) throw new ImageAPIError('404 Not found')
        return {
            image: res.body?res.body.url:'404 Not found'
        }
    }
    async sendRequest(endpoint){
        /**
         * @param {String} endpoint
         * 
         * @param {String} token
         */
        if (typeof this.method !== `string` || this.method !== `GET`) throw new TypeError('METHOD must be GET')

        if (!endpoint) throw new ImageAPIError('No ENDPOINT provided')

        if (token === null) throw new ImageAPIError('No token provided')

        if (typeof endpoint !== `string`) throw new TypeError('ENDPOINT must be a TYPE String')
        let res = await request.get(`https://anime-api.hisoka17.repl.co/img/${endpoint}?token=${token}`)
            if (!res.body) throw new ImageAPIError('404 Invalid Endpoint: Not found')
            return {
                rawResponse: res.body,
                image: res.body.url
        }
    }
    async getHentaiImage(){
        if (typeof this.method !== `string` || this.method !== `GET`) throw new TypeError('METHOD must be GET')

        let reqResponse = await request.get(`https://anime-api.hisoka17.repl.co/img/hentai`).catch(function(e){console.error(e); throw new Error(`Error occured while sending request:\n${e}`)})
        if (!reqResponse.body) throw new ImageAPIError('404 Not found')
        return {
            image: reqResponse.body.url
        }
    }
    async getSlapImage(){
        /**
         * @typeof {String}
         * @param {String} method GET
         */
        if (typeof this.method !== `string` || this.method !== 'GET') throw new TypeError('METHOD must be GET')
        let _req = await request
        .get('https://anime-api.hisoka17.repl.co/img/slap')
        return {
            image: _req.body.url
        }
    }
    
    async getPatImage(){
        /**
         *@param {String} method GET

         */
        if (typeof this.method !== `string` || this.method !== 'GET') throw new TypeError('METHOD must be GET')
        let __res = await request
        .get('https://anime-api.hisoka17.repl.co/img/pat')
        return {
            rawObject: __res.body,
            image: __res.body.url
        }

    }
}
module.exports = GetImages;
